'use client';
import { useMemo } from 'react';
import { useQuery } from '@tanstack/react-query';
import { SignatureAnalytics, EquipmentSignature } from '@/interfaces/bacnet';

const fetchSignatures = async (): Promise<EquipmentSignature[]> => {
  const res = await fetch('/api/signatures');
  if (!res.ok) throw new Error('Failed to fetch signatures');
  return res.json();
};

const fetchSignatureAnalytics = async (): Promise<SignatureAnalytics[]> => {
  const res = await fetch('/api/signatures/analytics');
  if (!res.ok) throw new Error('Failed to fetch signature analytics');
  return res.json();
};

interface SignatureAnalyticsProps {
  className?: string;
}

interface AnalyticsMetrics {
  totalSignatures: number;
  validatedSignatures: number;
  autoGeneratedSignatures: number;
  averageAccuracy: number;
  averageConfidence: number;
  totalMatches: number;
  positiveRatio: number;
  topPerformingSignatures: (SignatureAnalytics & { signatureName: string })[];
  lowPerformingSignatures: (SignatureAnalytics & { signatureName: string })[];
  equipmentTypeDistribution: Record<string, number>;
  usageTrends: {
    mostUsed: SignatureAnalytics & { signatureName: string };
    leastUsed: SignatureAnalytics & { signatureName: string };
  };
}

const MetricCard: React.FC<{
  title: string;
  value: string | number;
  subtitle?: string;
  trend?: 'up' | 'down' | 'stable';
  color?: 'blue' | 'green' | 'yellow' | 'red' | 'gray';
}> = ({ title, value, subtitle, trend, color = 'blue' }) => {
  const colorClasses = {
    blue: 'bg-blue-50 border-blue-200 text-blue-900',
    green: 'bg-green-50 border-green-200 text-green-900',
    yellow: 'bg-yellow-50 border-yellow-200 text-yellow-900',
    red: 'bg-red-50 border-red-200 text-red-900',
    gray: 'bg-gray-50 border-gray-200 text-gray-900',
  };

  const trendIcons = {
    up: '‚ÜóÔ∏è',
    down: '‚ÜòÔ∏è',
    stable: '‚Üí',
  };

  return (
    <div className={`p-4 border rounded-lg ${colorClasses[color]}`}>
      <div className="flex justify-between items-start">
        <div>
          <div className="text-sm font-medium opacity-75">{title}</div>
          <div className="text-2xl font-bold mt-1">{value}</div>
          {subtitle && (
            <div className="text-xs opacity-60 mt-1">{subtitle}</div>
          )}
        </div>
        {trend && (
          <div className="text-lg">{trendIcons[trend]}</div>
        )}
      </div>
    </div>
  );
};

export const SignatureAnalyticsPanel: React.FC<SignatureAnalyticsProps> = ({ className }) => {
  const { data: signatures, isLoading: signaturesLoading } = useQuery({
    queryKey: ['signatures'],
    queryFn: fetchSignatures,
  });

  const { data: analytics, isLoading: analyticsLoading } = useQuery({
    queryKey: ['signature-analytics'],
    queryFn: fetchSignatureAnalytics,
  });

  const metrics = useMemo((): AnalyticsMetrics | null => {
    if (!signatures || !analytics) return null;

    const signatureMap = signatures.reduce((acc, sig) => {
      acc[sig.id] = sig;
      return acc;
    }, {} as Record<string, EquipmentSignature>);

    const analyticsWithNames = analytics
      .filter(a => signatureMap[a.signatureId])
      .map(a => ({
        ...a,
        signatureName: signatureMap[a.signatureId].name,
      }));

    const totalSignatures = signatures.length;
    const validatedSignatures = signatures.filter(s => s.source === 'user-validated').length;
    const autoGeneratedSignatures = signatures.filter(s => s.source === 'auto-generated').length;
    
    const averageAccuracy = analytics.length > 0 
      ? analytics.reduce((sum, a) => sum + a.accuracy, 0) / analytics.length 
      : 0;
    
    const averageConfidence = signatures.length > 0
      ? signatures.reduce((sum, s) => sum + s.confidence, 0) / signatures.length
      : 0;

    const totalMatches = analytics.reduce((sum, a) => sum + a.totalMatches, 0);
    
    const totalFeedback = analytics.reduce((sum, a) => sum + a.userFeedback.positive + a.userFeedback.negative, 0);
    const positiveRatio = totalFeedback > 0 
      ? analytics.reduce((sum, a) => sum + a.userFeedback.positive, 0) / totalFeedback
      : 0;

    const topPerformingSignatures = analyticsWithNames
      .sort((a, b) => b.accuracy - a.accuracy)
      .slice(0, 3);

    const lowPerformingSignatures = analyticsWithNames
      .filter(a => a.accuracy < 70)
      .sort((a, b) => a.accuracy - b.accuracy)
      .slice(0, 3);

    const equipmentTypeDistribution = signatures.reduce((acc, sig) => {
      acc[sig.equipmentType] = (acc[sig.equipmentType] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    const sortedByUsage = analyticsWithNames.sort((a, b) => b.usageFrequency - a.usageFrequency);
    const usageTrends = {
      mostUsed: sortedByUsage[0],
      leastUsed: sortedByUsage[sortedByUsage.length - 1],
    };

    return {
      totalSignatures,
      validatedSignatures,
      autoGeneratedSignatures,
      averageAccuracy,
      averageConfidence,
      totalMatches,
      positiveRatio,
      topPerformingSignatures,
      lowPerformingSignatures,
      equipmentTypeDistribution,
      usageTrends,
    };
  }, [signatures, analytics]);

  if (signaturesLoading || analyticsLoading) {
    return (
      <div className={`p-6 bg-white rounded-lg border ${className}`}>
        <div className="flex items-center justify-center py-8">
          <div className="text-gray-500">Loading analytics...</div>
        </div>
      </div>
    );
  }

  if (!metrics) {
    return (
      <div className={`p-6 bg-white rounded-lg border ${className}`}>
        <div className="text-center py-8 text-gray-500">
          <div className="text-lg mb-2">üìä</div>
          <div>No analytics data available</div>
        </div>
      </div>
    );
  }

  return (
    <div className={`p-6 bg-white rounded-lg border ${className}`}>
      <h3 className="text-lg font-bold text-gray-900 mb-6">Signature Performance Analytics</h3>
      
      {/* Overview Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
        <MetricCard
          title="Total Signatures"
          value={metrics.totalSignatures}
          subtitle={`${metrics.validatedSignatures} validated, ${metrics.autoGeneratedSignatures} auto-generated`}
          color="blue"
        />
        <MetricCard
          title="Average Accuracy"
          value={`${Math.round(metrics.averageAccuracy)}%`}
          subtitle="Across all signatures"
          color={metrics.averageAccuracy >= 80 ? 'green' : metrics.averageAccuracy >= 60 ? 'yellow' : 'red'}
        />
        <MetricCard
          title="Average Confidence"
          value={`${Math.round(metrics.averageConfidence)}%`}
          subtitle="Signature confidence scores"
          color={metrics.averageConfidence >= 80 ? 'green' : metrics.averageConfidence >= 60 ? 'yellow' : 'red'}
        />
        <MetricCard
          title="Total Matches"
          value={metrics.totalMatches}
          subtitle={`${Math.round(metrics.positiveRatio * 100)}% positive feedback`}
          color="gray"
        />
      </div>

      {/* Equipment Type Distribution */}
      <div className="mb-8">
        <h4 className="text-md font-semibold text-gray-800 mb-4">Equipment Type Distribution</h4>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
          {Object.entries(metrics.equipmentTypeDistribution)
            .sort(([,a], [,b]) => b - a)
            .map(([type, count]) => (
              <div key={type} className="flex justify-between items-center p-3 bg-gray-50 rounded">
                <span className="text-sm font-medium text-gray-700">{type}</span>
                <span className="text-sm text-gray-600">{count} signature{count !== 1 ? 's' : ''}</span>
              </div>
            ))}
        </div>
      </div>

      {/* Performance Insights */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Top Performing Signatures */}
        <div>
          <h4 className="text-md font-semibold text-gray-800 mb-4">üèÜ Top Performing Signatures</h4>
          <div className="space-y-3">
            {metrics.topPerformingSignatures.map((sig, idx) => (
              <div key={sig.signatureId} className="flex justify-between items-center p-3 bg-green-50 border border-green-200 rounded">
                <div>
                  <div className="text-sm font-medium text-green-900">{sig.signatureName}</div>
                  <div className="text-xs text-green-700">
                    {sig.totalMatches} matches ‚Ä¢ {sig.usageFrequency} usage frequency
                  </div>
                </div>
                <div className="text-right">
                  <div className="text-sm font-bold text-green-800">{Math.round(sig.accuracy)}%</div>
                  <div className="text-xs text-green-600">accuracy</div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Low Performing Signatures */}
        <div>
          <h4 className="text-md font-semibold text-gray-800 mb-4">‚ö†Ô∏è Signatures Needing Attention</h4>
          {metrics.lowPerformingSignatures.length > 0 ? (
            <div className="space-y-3">
              {metrics.lowPerformingSignatures.map((sig) => (
                <div key={sig.signatureId} className="flex justify-between items-center p-3 bg-red-50 border border-red-200 rounded">
                  <div>
                    <div className="text-sm font-medium text-red-900">{sig.signatureName}</div>
                    <div className="text-xs text-red-700">
                      {sig.totalMatches} matches ‚Ä¢ {sig.usageFrequency} usage frequency
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="text-sm font-bold text-red-800">{Math.round(sig.accuracy)}%</div>
                    <div className="text-xs text-red-600">accuracy</div>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="p-4 bg-green-50 border border-green-200 rounded text-center">
              <div className="text-sm text-green-800">üéâ All signatures performing well!</div>
              <div className="text-xs text-green-600 mt-1">No signatures below 70% accuracy</div>
            </div>
          )}
        </div>
      </div>

      {/* Usage Trends */}
      {metrics.usageTrends.mostUsed && (
        <div className="mt-8">
          <h4 className="text-md font-semibold text-gray-800 mb-4">Usage Trends</h4>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="p-4 bg-blue-50 border border-blue-200 rounded">
              <div className="text-sm font-medium text-blue-900 mb-2">üî• Most Used Signature</div>
              <div className="text-lg font-bold text-blue-800">{metrics.usageTrends.mostUsed.signatureName}</div>
              <div className="text-sm text-blue-700">
                {metrics.usageTrends.mostUsed.usageFrequency} uses ‚Ä¢ {Math.round(metrics.usageTrends.mostUsed.accuracy)}% accuracy
              </div>
            </div>
            {metrics.usageTrends.leastUsed && (
              <div className="p-4 bg-gray-50 border border-gray-200 rounded">
                <div className="text-sm font-medium text-gray-700 mb-2">üí§ Least Used Signature</div>
                <div className="text-lg font-bold text-gray-800">{metrics.usageTrends.leastUsed.signatureName}</div>
                <div className="text-sm text-gray-600">
                  {metrics.usageTrends.leastUsed.usageFrequency} uses ‚Ä¢ {Math.round(metrics.usageTrends.leastUsed.accuracy)}% accuracy
                </div>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}; 